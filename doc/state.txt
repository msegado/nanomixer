State Management
================

The server is the authoritative source for the current mixer state, since it communicates it directly to the audio processing engine.

Client-server communication proceeds in lock-step, driven by the client. The client sends a message containing the following information:

{
    "seq": a message sequence number,
    "state": a state update object, described below
    "snapshot": (optional) True if the server should save the current state as a snapshot.
}.

The server responds with a message:

{
    "seq": the client message sequence number to which this message is a response,
    "state": a state update object,
    "meter": a metering packet, described below.
}.

The client always responds to a server message with another message, possibly with an empty state update, to ensure that communication flow continues.

A state update packet is a JSON object mapping control names to current values. Control names are strings, constructed as follows:

buses:
  name: "b{bus}/name"
  faders: "b{bus}/c{chan}/(lvl|pan)"
  master fader: "b{bus}/(lvl|pan)"
channels:
  name: "c{chan}/name"
  filter: "c{chan}/f{filt}/{param}", where param is "type", "freq", "gain", or "q"

All fader levels and filter gains are in dB. Pan is -.5 (full left) to 0 (center) to .5 (full right). Frequencies are in Hz. Filter types are one of:
 - peaking
 - lowpass
 - highpass
 - bandpass
 - notch
 - allpass
 - lowshelf
 - highshelf

On connect, the client sends {seq: 0, state: {}}, and the server responds with the full current state. The client then responds to the server's response, and the communication loop continues.

The client maintains the last sequence number that it has sent out, and the last sequence number that it has received from the server.

For each controllable value (defined below), each client maintains two values: the value as currently represented in its UI, and the most recent value that it is certain the server had. When a value is changed in the UI, the new value is set in the update queue (which is another state update object). If the last sequence number that it has received from the server is no more than one less than the last sequence number it has sent out, the client immediately sends a message to the server and clears the update queue. All messages to the server include and empty the update queue, so the update will get sent on the next meter packet received.

Metering packets
----------------

A meter packet is a JSON object (encoded along with the whole state update packet) with the following schema:

{
    "c": [<channel 0 level in dB>, ...],
    "b": [<bus 0 level in dB>, ...]
}
